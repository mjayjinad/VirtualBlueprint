name: üìÑ Summarize Unity Test Results

description: Summarizes the results of EditMode and PlayMode Unity test jobs into the GitHub Actions summary tab.

on:
  workflow_call:
    inputs:
      quietMode:
        required: true
        type: string
      editmodeFailed:
        required: true
        type: string
      playmodeFailed:
        required: true
        type: string
      editmodeTotal:
        required: true
        type: string
      editmodePassed:
        required: true
        type: string
      editmodeResult:
        required: true
        type: string
      editmodeDuration:
        required: true
        type: string
      playmodeTotal:
        required: true
        type: string
      playmodePassed:
        required: true
        type: string
      playmodeResult:
        required: true
        type: string
      playmodeDuration:
        required: true
        type: string
    outputs:
      hasFails:
        description: "Whether any test failures occurred"
        value: ${{ jobs.summarize.outputs.has_fails }}
      totalTests:
        description: "Total number of tests run (combined EditMode + PlayMode)"
        value: ${{ jobs.summarize.outputs.total_tests }}
      passedTests:
        description: "Total number of passed tests (combined EditMode + PlayMode)"
        value: ${{ jobs.summarize.outputs.passed_tests }}
      failedTestNames:
        description: "List of failed test names (multiline string or 'None' if no failures)"
        value: ${{ jobs.summarize.outputs.failed_test_names }}

jobs:
  summarize:
    name: üìÑ Summarize Tests Results
    runs-on: ubuntu-latest
    outputs:
      has_fails: ${{ steps.collect.outputs.has_fails }}
      total_tests: ${{ steps.collect.outputs.total_tests }}
      passed_tests: ${{ steps.collect.outputs.passed_tests }}
      failed_test_names: ${{ steps.collect.outputs.failed_test_names }}
    steps:
      - name: üìÑ Write Test Summary
        run: |
          echo "### üìã Unity Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test Mode   | Result     | Duration | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|------------|----------|--------|" >> $GITHUB_STEP_SUMMARY

          summarize() {
            local MODE=$1
            local ICON=$2
            local TOTAL=$3
            local PASSED=$4
            local RESULT=$5
            local DURATION=$6

            local DISPLAY_RESULT="- / -"
            local DISPLAY_DURATION="N/A"
            local STATUS="‚ÑπÔ∏è"

            if [[ -n "$TOTAL" && "$TOTAL" != "0" && "$RESULT" != "Skipped" && "$RESULT" != "" && "$RESULT" != "null" ]]; then
              DISPLAY_RESULT="${PASSED} / ${TOTAL}"
              DISPLAY_DURATION="$DURATION"

              if [[ "$RESULT" == "Passed" ]]; then
                STATUS="‚úîÔ∏è"
              else
                STATUS="‚ùå"
              fi
            fi

            printf "| %s %s | %s | %s | %s |\n" "$ICON" "$MODE" "$DISPLAY_RESULT" "$DISPLAY_DURATION" "$STATUS" >> $GITHUB_STEP_SUMMARY
          }

          summarize "EditMode" "ü•™" \
            "${{ inputs.editmodeTotal }}" \
            "${{ inputs.editmodePassed }}" \
            "${{ inputs.editmodeResult }}" \
            "${{ inputs.editmodeDuration }}"

          summarize "PlayMode" "üéÆ" \
            "${{ inputs.playmodeTotal }}" \
            "${{ inputs.playmodePassed }}" \
            "${{ inputs.playmodeResult }}" \
            "${{ inputs.playmodeDuration }}"

      - name: üìÉ Download Test Results
        if: ${{ inputs.quietMode == 'false' || inputs.editmodeFailed == 'true' || inputs.playmodeFailed == 'true' }}
        uses: actions/download-artifact@v4
        with:
          path: downloaded-results

      - name: üîç Append Failed Test Details and Collect Outputs
        id: collect
        run: |
          set +e
          HAS_FAILS="false"
          FAILED_TESTS_SUMMARY=""

          for MODE in EditMode PlayMode; do
            XML=$(find downloaded-results -type f -path "*Unity-${MODE}-*" -name "*.xml" | head -n 1)

            if [[ -f "$XML" ]]; then
              FAILS=$(grep -oP 'test-case[^>]+result="Failed"' "$XML" | grep -oP 'fullname="\K[^"]+')
              if [[ -n "$FAILS" ]]; then
                HAS_FAILS="true"
                FAILED_TESTS_SUMMARY+="### ‚ùå ${MODE} Failed Tests"$'\n'
                while read -r fail; do
                  FAILED_TESTS_SUMMARY+="- \`$fail\`"$'\n'
                done <<< "$FAILS"
                FAILED_TESTS_SUMMARY+=$'\n'
              fi
            fi
          done

          # Write to GitHub summary (LEAVE THIS AS IS)
          if [[ "$HAS_FAILS" == "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "<details>" >> $GITHUB_STEP_SUMMARY
            echo "<summary>‚ùå Failed Tests (details)</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "$FAILED_TESTS_SUMMARY" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi

          # Write outputs for downstream
          echo "has_fails=$HAS_FAILS" >> $GITHUB_OUTPUT

          TOTAL_TESTS=$(( ${{ inputs.editmodeTotal }} + ${{ inputs.playmodeTotal }} ))
          PASSED_TESTS=$(( ${{ inputs.editmodePassed }} + ${{ inputs.playmodePassed }} ))

          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$PASSED_TESTS" >> $GITHUB_OUTPUT

          if [[ "$HAS_FAILS" == "true" ]]; then
            echo "failed_test_names<<EOF" >> $GITHUB_OUTPUT
            echo -e "$FAILED_TESTS_SUMMARY" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "failed_test_names=None" >> $GITHUB_OUTPUT
          fi